@layout BaseLayout

@page "/"

@using Csla;

@inject ViewModel<Credentials> vmCredentials
@inject Csla.IDataPortalFactory _factory
@inject Csla.ApplicationContext _appContext
@inject NavigationManager _nm
@inject AuthenticationStateProvider _authenticationStateProvider

<PageTitle>Login</PageTitle>

<div class="container text-center">
    <h1>Csla Blazor Maui Sample App</h1>
    @if (vmCredentials.Model != null)
    {
        <EditForm Model="vmCredentials.Model" OnValidSubmit="@HandleSubmitAsync">
            <div class="form-floating mb-3">
                <InputText type="text" class="form-control" id="username" placeholder="Username" @bind-Value="vmCredentials.Model.Username" />
                <label for="username">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" class="form-control" id="password" placeholder="Password" @bind-Value="vmCredentials.Model.Password"/>
                <label for="password">Password</label>
            </div>
            <button class="btn btn-primary w-100" type="submit">Login</button>
        </EditForm>
    }
</div>

@code {
    protected override async Task OnParametersSetAsync()
    {
        var credentialDataPortal = _factory.GetPortal<Credentials>();
        await vmCredentials.RefreshAsync(() => credentialDataPortal.CreateAsync());
        await base.OnParametersSetAsync();
    }

    private async Task HandleSubmitAsync()
    {
        var validatorDataPortal = _factory.GetPortal<CredentialValidator>();

        var validator = await validatorDataPortal.FetchAsync(vmCredentials.Model);
        var principal = validator.GetPrincipal();
        _appContext.User = principal;

        ((CslaAuthenticationStateProvider)_authenticationStateProvider).SetPrincipal(_appContext.Principal);
        _nm.NavigateTo("/home");
    }
}